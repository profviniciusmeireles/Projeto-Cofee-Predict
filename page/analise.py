import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

def show():

    @st.cache_data
    def load_data():
        data = pd.read_excel("data/Dados_Conab.xlsx")
        return data

    df = load_data()

    ## st.info: texto justificado na p√°gina
    st.markdown("""
    <style>
    .stAlert p {
        text-align: justify;
    }
    </style>
    """, unsafe_allow_html=True)

    
    col1, col2 = st.columns([1, 6])
        
    with col1:    
        # Exibir selectbox para escolher o estado
        estado = st.radio("Selecione o estado:", df['Estado'].unique(), index=1, horizontal=True)             

    # Selecionar um √∫nico estado
    dados_estado = df[df['Estado'] == estado]
    with st.container(border=True):
        st.subheader(f"üìà Analisando dados para {estado}", divider='green')
    
        # Criar as 3 abas (Tabs)
        tabs = st.tabs(["Produ√ß√£o Anual", "Tend√™ncia e Sazonalidade", "Bienalidade", "Tabela de Dados"])

        with tabs[0]:
        # Produ√ß√£o Anual
            st.write("üìä Gr√°ficos de Produ√ß√£o e Produtividade")

            # Criar a figura para produ√ß√£o e produtividade
            fig1, fig2 = st.columns(2)

            with fig1:
                # Produ√ß√£o
                fig_prod = go.Figure()
                fig_prod.add_trace(go.Bar(
                    x=dados_estado['Ano'],
                    y=dados_estado['Producao'],
                    name=f"{estado} - Produ√ß√£o",
                    marker_color='green',
                    opacity=0.6
                ))

                # Adicionar linha de m√©dia m√≥vel para o estado selecionado
                fig_prod.add_trace(go.Scatter(
                    x=dados_estado['Ano'],
                    y=dados_estado['Producao'].rolling(2).mean(),
                    mode='lines+markers',
                    name=f"{estado} - Previs√£o Produ√ß√£o",
                    line=dict(color='red', dash='dash')
                ))

                fig_prod.update_layout(
                    xaxis_title='Ano',
                    yaxis_title=f"Produ√ß√£o (em mil sacas)",
                    #legend_title="Estado",
                    legend=dict(
                        orientation="h",  # Legenda horizontal
                        y=-0.2,  # Ajuste a posi√ß√£o vertical (acima do gr√°fico)
                        xanchor="center",  # Alinhar a legenda ao centro
                        x=0.5  # Ajuste a posi√ß√£o horizontal
                    )
                )

                st.plotly_chart(fig_prod)
            
            # Inicializar a figura para produtividade
            with fig2:
               
                fig_produtividade = go.Figure()
                fig_produtividade.add_trace(go.Bar(
                    x=dados_estado['Ano'],
                    y=dados_estado['Produtividade'],
                    name=f"{estado} - Produtividade",
                    marker_color='blue',
                    opacity=0.6
                ))

                # Adicionar linha de m√©dia m√≥vel para o gr√°fico de Produtividade
                fig_produtividade.add_trace(go.Scatter(
                    x=dados_estado['Ano'],
                    y=dados_estado['Produtividade'].rolling(2).mean(),
                    mode='lines+markers',
                    name=f"{estado} - Previs√£o Produtividade",
                    line=dict(color='red', dash='dash')
                ))

                fig_produtividade.update_layout(
                    xaxis_title='Ano',
                    yaxis_title=f"Produtividade (sacas/hectare)",
                    #legend_title="Estado",
                    legend=dict(
                        orientation="h",  # Legenda horizontal
                        y=-0.2,  # Ajuste a posi√ß√£o vertical (acima do gr√°fico)
                        xanchor="center",  # Alinhar a legenda ao centro
                        x=0.5  # Ajuste a posi√ß√£o horizontal
                    )
                )
                st.plotly_chart(fig_produtividade)
                st.write("<p style='font-size:13px;'>Fonte: Conab</p>", unsafe_allow_html=True)


            
    #########################################################################################

        with tabs[1]:
        # An√°lise de tend√™ncia sazonal

            df_estado = dados_estado
            df_estado['Data'] = pd.to_datetime(df_estado['Ano'].astype(str) + '-01-01')  # Ajuste para dados mensais ou trimestrais
            df_estado.set_index('Data', inplace=True)

            # Aplicar decomposi√ß√£o de s√©ries temporais
            from statsmodels.tsa.seasonal import seasonal_decompose
            result = seasonal_decompose(df_estado['Producao'], model='multiplicative', period=12)  # Per√≠odo ajust√°vel (12 para mensal)

            # Extraindo componentes de decomposi√ß√£o
            trend = result.trend
            seasonal = result.seasonal

            with st.container(border=True): 
                st.write("üìÖ An√°lise de Tend√™ncias Sazonais")
                
                col1, col2 = st.columns(2)
                with col1:
                    # Gr√°fico da tend√™ncia
                    fig_trend = go.Figure()
                    fig_trend.add_trace(go.Scatter(x=df_estado.index, y=trend, mode='lines', name='Tend√™ncia', line=dict(color='blue')))
                    fig_trend.update_layout(title=f'Tend√™ncia da Produ√ß√£o para {estado}', xaxis_title='Data', yaxis_title='Produ√ß√£o (em mil sacas)')
                    st.plotly_chart(fig_trend)
                
                with col2:
                    # Gr√°fico da sazonalidade
                    fig_seasonal = go.Figure()
                    fig_seasonal.add_trace(go.Scatter(x=df_estado.index, y=seasonal, mode='lines', name='Sazonalidade', line=dict(color='orange')))
                    fig_seasonal.update_layout(title=f'Sazonalidade da Produ√ß√£o para {estado}', xaxis_title='Data', yaxis_title='Produ√ß√£o (em mil sacas)')
                    st.plotly_chart(fig_seasonal)

                    
                # Exibir informa√ß√µes sobre os resultados
                if estado == "ES":
                    st.info(f"üìÖ **Resultado da decomposi√ß√£o sazonal para {estado}**: A an√°lise da produ√ß√£o de caf√© no Esp√≠rito Santo mostra uma tend√™ncia de crescimento constante ao longo dos anos. A sazonalidade apresenta varia√ß√µes anuais regulares com picos e quedas. Os res√≠duos s√£o pr√≥ximos de zero, indicando que o modelo captura bem a tend√™ncia e sazonalidade.")
                else:
                    st.info(f"üìÖ **Resultado da decomposi√ß√£o sazonal para {estado}**: A an√°lise da produ√ß√£o de caf√© em Minas Gerais indica uma tend√™ncia de crescimento cont√≠nuo de 2000 a 2024. A sazonalidade apresenta flutua√ß√µes anuais regulares com picos e vales definidos. Res√≠duos pr√≥ximos de zero mostram que a variabilidade √© amplamente explicada pela tend√™ncia e sazonalidade.")


            # Exibir um gr√°fico da previs√£o ajustada para o ano selecionado
            with st.container(border=True): 
                st.write("üìà Previs√£o Ajustada")
                df_estado['Previsao_Ajustada'] = result.trend * result.seasonal  # Previs√£o ajustada pela tend√™ncia e sazonalidade

                # Gr√°fico de linha da previs√£o ajustada
                fig = go.Figure()

                fig.add_trace(go.Scatter(x=df_estado.index, y=df_estado['Producao'], mode='lines', name='Produ√ß√£o Original'))
                fig.add_trace(go.Scatter(x=df_estado.index, y=df_estado['Previsao_Ajustada'], mode='lines', name='Produ√ß√£o Ajustada', line=dict(dash='dash', color='red')))

                fig.update_layout(title=f'Produ√ß√£o Ajustada por Tend√™ncia Sazonal para {estado}',
                                xaxis_title='Data',
                                yaxis_title='Produ√ß√£o (em mil sacas)')

                st.plotly_chart(fig)
                st.write("<p style='font-size:13px;'>Fonte: Elaborado pelo autor</p>", unsafe_allow_html=True)

                # Exibir informa√ß√µes sobre os resultados da previs√£o ajustada
                if estado == "ES":
                    st.info(f"üìÖ **Resultado para {estado}**: A previs√£o ajustada para o ES mostra que a produ√ß√£o segue a original com sazonalidade suavizada. Entre 2005 e 2020, observa-se uma tend√™ncia de crescimento, com flutua√ß√µes em 2015 e um pico em 2020, destacando as tend√™ncias subjacentes na produ√ß√£o..")
                else:
                    st.info(f"üìÖ **Resultado para {estado}**: A previs√£o ajustada para MG mostra que a produ√ß√£o acompanha de perto a original, com sazonalidade suavizada. H√° uma tend√™ncia de crescimento at√© 2020, seguida por uma queda e uma recupera√ß√£o parcial, destacando a tend√™ncia subjacente na produ√ß√£o. ")

        
        with tabs[2]:    
            with st.container(border=True): 
                st.write(f"üìà Bienalidade do Caf√©: {estado}")     

                # Separar dados de bienalidade positiva (anos pares) e negativa (anos √≠mpares)
                positive_years = dados_estado[dados_estado['Ano'] % 2 == 0]
                negative_years = dados_estado[dados_estado['Ano'] % 2 != 0]

                # Separar dados de bienalidade positiva (anos pares) e negativa (anos √≠mpares)
                positive_years = dados_estado[dados_estado['Ano'] % 2 == 0]
                negative_years = dados_estado[dados_estado['Ano'] % 2 != 0]

                # Criar o gr√°fico com os anos como eixo X e a produ√ß√£o como eixo Y
                fig = go.Figure()

                # Adicionar colunas para bienalidade positiva e negativa
                fig.add_trace(go.Bar(
                    x=positive_years['Ano'],
                    y=positive_years['Producao'],
                    name='Bienalidade Positiva (Anos Pares)',
                    marker_color='green'        
                ))

                fig.add_trace(go.Bar(
                    x=negative_years['Ano'],
                    y=negative_years['Producao'],
                    name='Bienalidade Negativa (Anos √çmpares)',
                    marker_color='darkred'        
                ))

                # Adicionar linha de tend√™ncia m√≥vel para a bienalidade positiva (anos pares)
                fig.add_trace(go.Scatter(
                    x=positive_years['Ano'],
                    y=positive_years['Producao'].rolling(2).mean(),
                    mode='lines+markers',
                    name='Tend√™ncia Bienalidade Positiva',
                    line=dict(color='aqua', dash='dash')
                ))

                # Adicionar linha de tend√™ncia m√≥vel para a bienalidade negativa (anos √≠mpares)
                fig.add_trace(go.Scatter(
                    x=negative_years['Ano'],
                    y=negative_years['Producao'].rolling(2).mean(),
                    mode='lines+markers',
                    name='Tend√™ncia Bienalidade Negativa',
                    line=dict(color='yellow', dash='dash')
                ))


                # Ajustes do layout do gr√°fico
                fig.update_layout(
                    title=dict(
                        text=f"Produ√ß√£o Anual para {estado} - Compara√ß√£o Bienalidade Positiva e Negativa",
                        x=0.5,              # Centraliza o t√≠tulo
                        xanchor="center",
                        yanchor="top"
                    ),
                    xaxis_title="Ano",
                    yaxis_title="Produ√ß√£o (em mil sacas)",
                    barmode='group',
                    legend=dict(
                        orientation="h",    # Horizontal
                        y=-0.2,             # Abaixo do gr√°fico
                        x=0.5,
                        xanchor="center"
                    )
                )

                  
                # Gr√°fico de pizza para propor√ß√£o de bienalidade
                total_positive = positive_years['Producao'].sum()
                total_negative = negative_years['Producao'].sum()

                fig_pie = go.Figure(
                    go.Pie(
                        labels=['Bienalidade Positiva', 'Bienalidade Negativa'],
                        values=[total_positive, total_negative],
                        marker=dict(colors=['green', 'darkred']),
                        hole=0.4
                    )
                )

                fig_pie.update_layout(
                    title=dict(
                        text="Propor√ß√£o de Bienalidade na Produ√ß√£o do Caf√©",
                        x=0.5,             # Centraliza o t√≠tulo no cont√™iner
                        xanchor="center",
                        yanchor="top"
                    ),
                    legend=dict(
                        orientation="h",   # Horizontal
                        y=-0.2,            # Abaixo do gr√°fico
                        x=0.5,
                        xanchor="center"
                    )
                )

                # Exibir gr√°ficos lado a lado
                col1, col2 = st.columns(2)

                with col1:
                    st.plotly_chart(fig)

                with col2:
                    st.plotly_chart(fig_pie)

                st.write("<p style='font-size:13px;'>Fonte: Elaborado pelo autor</p>", unsafe_allow_html=True)



                st.info(f"""
                O gr√°fico exibe a produ√ß√£o anual para o estado de {estado}, com a distin√ß√£o entre anos de bienalidade positiva (pares) e negativa (√≠mpares).
                Observa-se uma flutua√ß√£o consistente, indicando anos de maior e menor produ√ß√£o alternados, t√≠pica da bienalidade de culturas espec√≠ficas como o Caf√© Ar√°bica. Essa an√°lise ajuda a compreender a varia√ß√£o de produ√ß√£o e a expectativa para anos futuros.
                """)   
                
                st.divider()
                st.write("‚åõ Fatores que influenciam a Bienalidade do Caf√©:")


                # Exibir informa√ß√µes sobre os resultados da previs√£o ajustada
                if estado == "ES":
                    st.info(f"O {estado} √© o 2¬∫ maior estado produtor, focado no caf√© conilon, a resili√™ncia clim√°tica do ES, com menor impacto de secas severas, torna a bienalidade mais branda. A variedade conilon √© naturalmente mais est√°vel e menos suscet√≠vel a flutua√ß√µes, e o uso de t√©cnicas de irriga√ß√£o auxilia na manuten√ß√£o da umidade constante, suavizando a bienalidade negativa. A ado√ß√£o de tecnologias modernas tamb√©m contribui para uma produ√ß√£o mais regular ao longo dos anos.")
                else:
                    st.info(f" {estado} √© o maior produtor de caf√© do Brasil, apresenta uma bienalidade fortemente influenciada por fatores como condi√ß√µes clim√°ticas, onde per√≠odos de chuva favorecem anos de alta produ√ß√£o. As pr√°ticas de manejo (poda e descanso das plantas) ajudam a manter o ciclo de bienalidade, enquanto a diversidade de solo e topografia propicia varia√ß√µes de produ√ß√£o. Al√©m disso, a carga nutricional do solo √© crucial; anos de alta produtividade podem esgotar os nutrientes, impactando a produ√ß√£o no ciclo seguinte. ")    

        with tabs[3]:  

            # Renomeando as colunas
            df.rename(columns={
                'PRODUCAO': 'Producao mil sacas',
                'AREA': 'Area em Producao ha',
                'PRODUTIVIDADE': 'Produtividade mil sacas/ha'
            }, inplace=True)
            
            # Configura√ß√£o de estilo para o DataFrame
            styled_df = df.drop('id', axis=1).style.set_properties(
                **{
                    'background-color': '#f5f5f5',
                    'color': '#333',
                    'border': '1px solid #ddd',
                    'padding': '10px'
                }
            ).set_table_styles(
                [
                    {
                        'selector': 'thead th',
                        'props': [
                            ('background-color', '#4CAF50'),
                            ('color', 'white'),
                            ('font-weight', 'bold')
                        ]
                    },
                    {
                        'selector': 'tbody tr:nth-child(even)',
                        'props': [('background-color', '#e6f7ff')]  # Azul suave para linhas √≠mpares
                    },
                    {
                        'selector': 'tbody tr:nth-child(odd)',
                        'props': [('background-color', '#ffffff')]  # Branco para linhas pares
                    }
                ]
            )

            # Remover o √≠ndice antes de exibir a tabela
            styled_df = styled_df.hide(axis="index")

           
            
            with st.expander("üìë Tabela de Dados", expanded=True):
                st.table(styled_df)